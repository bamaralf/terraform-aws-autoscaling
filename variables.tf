variable "name" {
    description = "(Optional) The name of the auto scaling group. By default generated by Terraform."
    default     = null
}

variable "name_prefix" {
    description = "(Optional) Creates a unique name beginning with the specified prefix. Conflicts with name."
    default     = null
}

variable "max_size" {
    description = "(Required) The maximum size of the auto scale group."
}

variable "min_size" {
    description = "(Required) The minimum size of the auto scale group. (See also Waiting for Capacity below.)"
}

variable "availability_zones" {
    description = "(Required only for EC2-Classic) A list of one or more availability zones for the group. This parameter should not be specified when using vpc_zone_identifier."
    default     = null
}

variable "default_cooldown" {
    description = "(Optional) The amount of time, in seconds, after a scaling activity completes before another scaling activity can start."
    default     = null
}

variable "launch_configuration" {
    description = "(Required) The name of the launch configuration to use."
}
variable "health_check_grace_period" {
    description = "(Optional) (Default: '300') Time (in seconds) after instance comes into service before checking health."
    default     = 300
}

variable "health_check_type" {
    description = "(Optional) 'EC2' or 'ELB'. Controls how health checking is done."
    default     = null
}

variable "desired_capacity" {
    description = "(Optional) The number of Amazon EC2 instances that should be running in the group. (See also Waiting for Capacity below.)"
    default     = null
}

variable "force_delete" {
    description = "(Optional) Allows deleting the autoscaling group without waiting for all instances in the pool to terminate. You can force an autoscaling group to delete even if it's in the process of scaling a resource. Normally, Terraform drains all the instances before deleting the group. This bypasses that behavior and potentially leaves resources dangling."
    default     = true
}

variable "load_balancers" {
    description = "(Optional) A list of elastic load balancer names to add to the autoscaling group names. Only valid for classic load balancers. For ALBs, use target_group_arns instead."
    default     = null
}

variable "vpc_zone_identifier" {
    description = "(Optional) A list of subnet IDs to launch resources in."
    default     = null
}

variable "target_group_arns" {
    description = "(Optional) A list of aws_alb_target_group ARNs, for use with Application Load Balancing."
    default     = null
}

variable "termination_policies" {
    description = "(Optional) A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are OldestInstance, NewestInstance, OldestLaunchConfiguration, ClosestToNextInstanceHour, Default."
    default     = ["Default"]
}

variable "suspended_processes" {
    description = "(Optional) A list of processes to suspend for the AutoScaling Group. The allowed values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer. Note that if you suspend either the Launch or Terminate process types, it can prevent your autoscaling group from functioning properly."
    default     = null
}

variable "placement_group" {
    description = "(Optional) The name of the placement group into which you'll launch your instances, if any."
    default     = null
}

variable "metrics_granularity" {
    description = "(Optional) The granularity to associate with the metrics to collect. The only valid value is 1Minute. Default is 1Minute."
    default     = null
}

variable "enabled_metrics" {
    description = "(Optional) A list of metrics to collect. The allowed values are GroupMinSize, GroupMaxSize, GroupDesiredCapacity, GroupInServiceInstances, GroupPendingInstances, GroupStandbyInstances, GroupTerminatingInstances, GroupTotalInstances."
    default     = null
}

variable "wait_for_capacity_timeout" {
    description = "(Default: '10m') A maximum duration that Terraform should wait for ASG instances to be healthy before timing out. (See also Waiting for Capacity below.) Setting this to '0' causes Terraform to skip all Capacity Waiting behavior."
    default     = "10m"
}

variable "min_elb_capacity" {
    description = "(Optional) Setting this causes Terraform to wait for this number of instances to show up healthy in the ELB only on creation. Updates will not wait on ELB instance number changes. (See also Waiting for Capacity below.)"
    default     = null
}

variable "wait_for_elb_capacity" {
    description = "(Optional) Setting this will cause Terraform to wait for exactly this number of healthy instances in all attached load balancers on both create and update operations. (Takes precedence over min_elb_capacity behavior.) (See also Waiting for Capacity below.)"
    default     = null
}

variable "protect_from_scale_in" {
    description = "(Optional) Allows setting instance protection. The autoscaling group will not select instances with this setting for terminination during scale in events."
    default     = true
}

variable "service_linked_role_arn" {
    description = "(Optional) The ARN of the service-linked role that the ASG will use to call other AWS services "
    default     = null
}

variable "tags" {
    description = "(Optional) A list of tag blocks (List of maps). Tags documented below."
    default     = null
}

variable "tag_inputs" {
    type  = list(object({
      key                    = string
      value                  = string
      propagate_at_launch    = string
    }))
    default = null
}

//launch_template config block:
variable "launch_template_inputs" {
  type = list(object({
      id                                           = string
      name                                         = string
      version                                      = number
   }))

default = null
}
/*
// mixed_instances_policy config block:
variable "mixed_instances_policy_inputs" {
    type = list(object({
       instances_distribution_inputs          = list(object({
         on_demand_allocation_strategy             = string
         on_demand_base_capacity                   = number
         on_demand_percentage_above_base_capacity  = number
         spot_allocation_strategy                  = string
         spot_instance_pools                       = number
         spot_max_price                            = string
       }))
       launch_template_inputs                 = list(object({
         launch_template_specification_inputs = list(object({
           launch_template_id                      = string 
           launch_template_name                    = string
           version                                 = string
         }))
         override_inputs                      = list(object({
           instance_type                           = string            
         }))
       }))
    }))
    default = null
}
*/


